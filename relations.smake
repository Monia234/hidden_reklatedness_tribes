##
## Relatetness related rules
##

#
# Detect IBD segemnts with germline
#

rule germline:
    input:
        ped="{dir}/{file}.ped", 
        map="{dir}/{file}_interpolated.map"
    output:
        "{dir}_GRM/{file}.match"
    params:
        prefix="{dir}_GRM/{file}"
    shell:
        "{BIN_DIR}/germlinew -input {input.ped} {input.map} -output {params.prefix} -bits 128 -min_m 1.5 -err_het 1 -err_hom 2 -g_extend -w_extend"

#
# Convert vcf to plinke format.
#

rule vcf2plink:
    input:
         "{dir}/{file}.vcf.gz"
    output:
         "{dir}/{file}.map",
         "{dir}/{file}.ped",
         "{dir}/{file}_interpolated.map"
    params:
        prefix="{dir}/{file}"
    shell:
        "{BIN_DIR}/gzvcf2plink -i {input} -o {params.prefix} -r {REF_DIR}/plink.chrALL.GRCh37.map.gz"

#
# Filter out polulation IBD segments using ERSA mask
#

rule FPI_filter_population_ibd:
    input:
        "{filename}.match.gz"
    output:
        "{filename}_FPI.match.gz"
    shell:
        "{BIN_DIR}/maskSegments -v -i {input} -o {output} -m {REF_DIR}/G1K_EUR-ersa.out.msk"


#
# Estimate pairwise IBD0 and relatedness degree from IBD segments (in germline format)
#

rule estimateIBD0:
    input:
        "{filename}.match.gz"
    output:
        "{filename}_IBD.csv"
    shell:
        "{BIN_DIR}/ibd2degree -v -i {input} -o {output} -m 3.0"

#
# Compare estimared degree relatedness vs reported (true) one.
#

rule compare_vs_true_rel:
    input:
        estRel="{filename}.csv", 
        trueRel=config['rel_true'],
        rmd=os.path.join(PWD, "notebooks/compare_vs_true_rel.Rmd")
    output:
        "{filename}_RVT.html"
    script:
        "notebooks/compare_vs_true_rel.Rmd"

